There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.

Roads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi.

This year, there will be a big event in the capital (city 0), and many people want to travel to this city.

Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.

It's guaranteed that each city can reach city 0 after reorder.

 

Example 1:


Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
Output: 3
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).
Example 2:


Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]
Output: 2
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).
Example 3:

Input: n = 3, connections = [[1,0],[2,0]]
Output: 0

SOL 1 :::: BFS

class Solution {
public:
    int minReorder(int n, vector<vector<int>>& c) 
    {
        int ans=0;
        vector<int> frnt[n],back[n];
        for(int i=0;i<n-1;i++)
        {
            frnt[c[i][0]].push_back(c[i][1]);
            back[c[i][1]].push_back(c[i][0]);
        }
        vector<int> vis(n);
        queue<int> q;
        q.push(0);
        while(!q.empty())
        {
            int curr=q.front();
            q.pop();
            vis[curr]=1;
            for(auto a : frnt[curr])
            {
                if(!vis[a])
                {
                    ans++;
                    q.push(a);
                }
            }
            for(auto b : back[curr])
            {
                if(!vis[b])
                {
                    q.push(b);
                }
            }
        }
        return ans;
    }
};

SOL ::: DFS

class Solution {
public:
    // Correct Solution
    // We are just making an undirected graph, where we are giving (+ve) sign to outgoing
    // edges and pretending that there is also the same incoming edge (or in general the opposite edge)
    // and inserting it into the adj[] list as (-ve) elements.
    // This is done so that the DFS doesn't stop when there are no outgoing edges 
    // (+ve edges) from the current edge. (Because there might be more outgoing edges afterwards)
    // Without the above idea, the basic idea fails in this test case : [[1,2],[2,0]].
    
    // Link to not fully correct code is given below
    // https://leetcode.com/submissions/detail/603533278/
    // This approach gets 72/76 test cases correct, but is not logically correct.
    // The below implementation corrects that.
    void makeGraph(vector<vector<int>>& connections,vector<int> adj[]){
        for(int i=0; i<connections.size(); i++){
            adj[connections[i][0]].push_back(connections[i][1]);
            adj[connections[i][1]].push_back(-connections[i][0]);
        }
    }
    void dfs(vector<int> adj[],vector<bool>& visited,int src,int &ans){
        visited[src] = true;
        for(int &v : adj[src]){
            if(!visited[abs(v)]){
                if(v > 0)
                    ans++;
                dfs(adj,visited,abs(v),ans);
            }
        }
    }
    int minReorder(int n, vector<vector<int>>& connections) {
        vector<int> adj[n];
        vector<bool> visited(n,false);
        int ans = 0;
        makeGraph(connections,adj);
        
        dfs(adj,visited,0,ans);
        return ans;
    }
};
